# Elysia.js プロジェクトのコーディング規約

## 基本原則

- コードは英語で記述するが、コメントとドキュメントは日本語で記述する
- 変数や関数の型（パラメータと戻り値）を必ず宣言する
- any型の使用を避け、必要な型を作成する
- パブリッククラスとメソッドにはJSDocでドキュメントを日本語で作成する
- 関数内に空白行を残さない
- ファイルごとに1つのエクスポート

## ドメイン駆動設計（DDD）の適用

- ドメインをプロジェクトの中心に据え、ビジネスロジックを集約する
- ドメイン層、アプリケーション層、インフラストラクチャ層、プレゼンテーション層に分割する
- ドメインモデルはビジネスルールを表現し、純粋なTypeScriptクラスとして実装する
- ユビキタス言語を使用し、コードとドキュメントで一貫した用語を使う
- 境界づけられたコンテキスト（Bounded Context）をモジュールとして実装する
- リポジトリパターンを使用してデータアクセスを抽象化する
- 集約（Aggregate）を明確に定義し、一貫性の境界を設定する
- ドメインイベントを使用して疎結合なシステムを構築する
- ドメインサービスを活用して、単一のエンティティでは解決できないロジックを実装する

## Elysia.js特有のガイドライン

- contextをDDDのバウンデッドコンテキストとして扱う
- ルートハンドラーはプレゼンテーション層の一部として扱い、アプリケーションサービスに処理を委譲する
- ドメインロジックはElysiaのルートハンドラーから分離する
- スキーマ検証はアプリケーション層の入り口で実施し、ドメインモデルへの変換を行う
- 依存性注入パターンを活用して、テスト可能なコードを書く
- onErrorフックを使用して例外処理を一元化する
- デコレータを使用して横断的関心事（ロギング、認証など）を実装する

## テスト戦略

- テストピラミッドに従い、単体テスト、統合テスト、E2Eテストをバランスよく実装する
- 単体テスト
  - ドメインロジックとユースケースを重点的にテストする
  - モックを最小限に抑え、実際の依存関係を使用できる場合は使用する
  - テストダブルを使用して外部依存性を模倣する
  - Bunのテストランナーを使用して高速にテストを実行する
- 統合テスト
  - 複数のコンポーネントの連携をテストする
  - リポジトリとデータベースの統合をテストする
  - 実際のHTTPリクエストとレスポンスをシミュレートする
- E2Eテスト
  - 実際のAPIエンドポイントを呼び出してテストする
  - ユーザーフローを模倣するシナリオベースのテストを書く
  - パフォーマンステストを実施する

## テストの実践

- テストファーストの開発を推奨する
- 各テストは独立して実行可能にする（テスト間の依存関係を避ける）
- Given-When-Then形式でテストシナリオを記述する
- テスト用のユーティリティとファクトリを作成し、テスト準備を簡素化する
- テストカバレッジの目標を設定し、監視する
- 障害発生時に再テストするテストケースを自動的に作成する
- スナップショットテストを活用してAPIレスポンスの変更を検出する
- パフォーマンステストを定期的に実行し、パフォーマンス低下を早期に検出する

## データと永続化

- リポジトリパターンを実装して、データアクセスを抽象化する
- クエリオブジェクトパターンを使用して、複雑なクエリをカプセル化する
- 読み取りと書き込みのモデルを分離する（CQRS）
- イベントソーシングを検討して、状態変更の履歴を管理する
- アグリゲートによるトランザクション境界を設定する

## フォルダ構造

- src/
  - domain/ (ドメインモデル、エンティティ、値オブジェクト)
  - application/ (ユースケース、アプリケーションサービス)
  - infrastructure/ (データベース、外部サービス連携)
  - presentation/ (Elysiaルートハンドラー、コントローラー)
  - shared/ (共通ユーティリティ)
- tests/
  - unit/ (単体テスト)
  - integration/ (統合テスト)
  - e2e/ (エンドツーエンドテスト)

## 命名規則

- クラスにはPascalCaseを使用
- 変数、関数、メソッドにはcamelCaseを使用
- ファイルとディレクトリ名にはkebab-caseを使用
- 環境変数にはUPPERCASEを使用
- マジックナンバーを避け、定数を定義する
- 関数は動詞で始める
- ブール値変数には動詞を使用（例: isLoading、hasError、canDeleteなど）