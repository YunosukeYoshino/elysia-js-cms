// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int          @id @default(autoincrement())
  email                 String       @unique
  password              String
  name                  String?
  role                  String       @default("user") // "admin" or "user"
  loginAttempts         Int          @default(0)
  lockedUntil          DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  refreshTokens        RefreshToken[]
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  posts                Post[]
  files                File[]       // ユーザーがアップロードしたファイルの関連付け
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  categories CategoryOnPost[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     CategoryOnPost[]
}

model CategoryOnPost {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  assignedAt DateTime @default(now())

  @@id([postId, categoryId])
}

// リフレッシュトークン管理用のモデル
model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([token])
}

// ファイル管理用のモデル
model File {
  id            Int      @id @default(autoincrement())
  fileName      String   // サーバー上でのファイル名 (UUID)
  originalName  String   // アップロード時のオリジナルファイル名
  mimeType      String   // ファイルのMIMEタイプ
  filePath      String   // サーバー上でのファイルパス
  thumbnailPath String?  // サムネイルパス（画像の場合）
  fileSize      Int      // ファイルサイズ（バイト単位）
  userId        Int      // アップロードしたユーザーのID
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}